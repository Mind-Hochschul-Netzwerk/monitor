server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          __path__: /var/log/*/*log

    pipeline_stages:
      - match:
          selector: '{filename="/var/log/traefik/accesslog.log"}'
          stages:
            - regex:
                expression: '(?P<clientAddr>\w{1,3}.\w{1,3}.\w{1,3}.\w{1,3}) - - \[(?P<timestamp>\d{2}.*\d{4})\] "(?P<request>.*)" (?P<statuscode>(?:\d+|-)) .* "(?P<referrer>.*)" "(?P<useragent>.*)" (?P<duration>\d+)ms'
            - labels:
                clientAddr:
                request:
                statuscode:
                referrer:
                useragent:
                timestamp:
                duration:
            - timestamp:
                source: timestamp
                format: "02/Jan/2006:15:04:05 -0700"
      - match:
          selector: '{filename="/var/log/nginx/openmediavault-webgui_access.log"}'
          stages:
            - regex:
                expression: '(?P<clientAddr>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) - - \[(?P<timestamp>\d{2}\/[A-z]{3}\/\d{4}:\d{2}:\d{2}:\d{2} (?:\+|\-)\d{4})\] (?:"(?P<method>GET|POST) (?P<url>.+) (?P<proto>HTTP.*)") (?P<statuscode>\d{3}) (?P<bytessent>\d+) "(?P<referrer>(?:\-|.+))" "(?P<useragent>[^"]+)"'
            - labels:
                clientAddr:
                timestamp:
                statuscode:
                referrer:
                url:
                useragent:
            - timestamp:
                source: timestamp
                format: "02/Jan/2006:15:04:05 -0700"

  - job_name: containers
    static_configs:
      - targets:
          - localhost
        labels:
          job: containerlogs
          __path__: /var/lib/docker/containers/*/*log

    # Add The Following to Container:

    # Docker:
    # --log-driver json-file --log-opt tag="{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

    # Docker Compose:
    # logging:
    #   driver: "json-file"
    #   options:
    #     max-size: "50m"
    #     max-file: "10"
    #     tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      - regex:
          expression: (?P<image_name>(?:[^|]*[^|])).(?P<container_name>(?:[^|]*[^|])).(?P<image_id>(?:[^|]*[^|])).(?P<container_id>(?:[^|]*[^|]))
          source: tag
      - timestamp:
          format: RFC3339Nano
          source: time
      - labels:
          tag:
          stream:
          image_name:
          container_name:
          image_id:
          container_id:
      - output:
          source: output
